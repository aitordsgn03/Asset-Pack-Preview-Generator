---
import { fileURLToPath } from "url";
import path from "node:path";
import fs from "node:fs/promises";
import Footer from "../components/Footer.astro";
import Layout from "@/layouts/layout.astro";

interface Pack {
  pack_name: string;
  description: string;
  author: string;
  stats: {
    total_models: number;
    total_animations: number;
  };
  models: {
    preview_image: string;
  }[];
  pack_preview_image: string;
}

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const dataPath = path.join(__dirname, "../../src/data");

// Declaramos packs fuera del try-catch
let packs: Array<{
  slug: string;
  name: string;
  description: string;
  totalModels: number;
  totalAnimations: number;
  pack_preview_image: string;
}> = [];

try {
  const files = await fs.readdir(dataPath);
  const jsonFiles = files.filter((file) => file.endsWith(".json"));

  const packsData = await Promise.all(
    jsonFiles.map(async (file) => {
      try {
        const content = await fs.readFile(path.join(dataPath, file), "utf-8");
        const data = JSON.parse(content) as Pack;
        const slug = file.replace(".json", "");

        const pack_preview_image = `pack_previews/${data.pack_preview_image}`;

        return {
          slug,
          name: data.pack_name,
          description: data.description,
          totalModels: data.stats.total_models,
          totalAnimations: data.stats.total_animations,
          previewImage: pack_preview_image,
          pack_preview_image: pack_preview_image,
        };
      } catch (error) {
        console.error(`Error processing file ${file}:`, error);
        return null;
      }
    }),
  );

  // Asignamos los packs v√°lidos a la variable
  packs = packsData.filter(
    (pack): pack is NonNullable<typeof pack> => pack !== null,
  );
} catch (error) {
  console.error("Error reading data directory:", error);
  throw new Error(`Failed to read data directory: ${error.message}`);
}
---

<Layout
  title="Asset Packs Collection"
  description="A collection of asset packs for game development"
  author="Artizau"
>
  <body>
    <h1>Asset Packs Collection</h1>

    <div class="packs-grid container">
      {
        packs.map((pack) => (
          <a href={`packs/${pack.slug}/index.html`} class="pack-link">
            <div class="pack-card">
              <img
                src={pack.pack_preview_image}
                alt={pack.name}
                class="pack-image"
              />
              <div class="pack-content">
                <h2 class="pack-title">{pack.name}</h2>
                <p class="pack-description">{pack.description}</p>
                <div class="pack-stats">
                  <span class="stat">{pack.totalModels} models</span>
                  {pack.totalAnimations > 0 && (
                    <span class="stat">{pack.totalAnimations} animations</span>
                  )}
                </div>
              </div>
            </div>
          </a>
        ))
      }
    </div>
  </body>
</Layout>
<style>
  .packs-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 2em;
    padding: 1em;
  }

  .pack-card {
    background-color: var(--color-surface);
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.2s ease-in-out;
    box-shadow: var(--shadow-md);
    height: 400px; /* Fixed height for the card */
    display: flex;
    flex-direction: column;
  }

  .pack-card:hover {
    transform: translateY(-5px);
  }

  .pack-image {
    width: 100%;
    height: 200px; /* Fixed height for images */
    object-fit: cover;
    background-color: var(--color-surface-alt);
  }

  .pack-content {
    padding: 1.5em;
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .pack-title {
    color: var(--color-text-primary);
    font-size: 1.2em;
    margin: 0 0 0.5em 0;
  }

  .pack-description {
    color: var(--color-text-secondary);
    font-size: 0.9em;
    margin-bottom: 1em;
    line-height: 1.4;
    /* Add ellipsis for long descriptions */
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .pack-stats {
    display: flex;
    gap: 1em;
    margin-top: auto; /* Push stats to bottom */
  }
  .stat {
    background-color: var(--color-surface-alt);
    padding: 0.3em 0.7em;
    border-radius: 4px;
    font-size: 0.8em;
  }

  .pack-link {
    display: block;
    text-decoration: none;
    color: inherit;
  }

  .pack-link:hover .pack-title {
    color: var(--color-accent);
  }

  @media (max-width: 768px) {
    .packs-grid {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
  }
</style>
